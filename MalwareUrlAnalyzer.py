import pandas as pd
import numpy as np
import joblib
import argparse
import time
import os
from tqdm import tqdm
import export_pb2

message = """
 ███▄ ▄███▓ ▄▄▄       ██▓     █     █░ ▄▄▄       ██▀███  ▓█████  █    ██  ██▀███   ██▓     ▄▄▄       ███▄    █  ▄▄▄       ██▓    ▓██   ██▓▒███████▒▓█████  ██▀███  
▓██▒▀█▀ ██▒▒████▄    ▓██▒    ▓█░ █ ░█░▒████▄    ▓██ ▒ ██▒▓█   ▀  ██  ▓██▒▓██ ▒ ██▒▓██▒    ▒████▄     ██ ▀█   █ ▒████▄    ▓██▒     ▒██  ██▒▒ ▒ ▒ ▄▀░▓█   ▀ ▓██ ▒ ██▒
▓██    ▓██░▒██  ▀█▄  ▒██░    ▒█░ █ ░█ ▒██  ▀█▄  ▓██ ░▄█ ▒▒███   ▓██  ▒██░▓██ ░▄█ ▒▒██░    ▒██  ▀█▄  ▓██  ▀█ ██▒▒██  ▀█▄  ▒██░      ▒██ ██░░ ▒ ▄▀▒░ ▒███   ▓██ ░▄█ ▒
▒██    ▒██ ░██▄▄▄▄██ ▒██░    ░█░ █ ░█ ░██▄▄▄▄██ ▒██▀▀█▄  ▒▓█  ▄ ▓▓█  ░██░▒██▀▀█▄  ▒██░    ░██▄▄▄▄██ ▓██▒  ▐▌██▒░██▄▄▄▄██ ▒██░      ░ ▐██▓░  ▄▀▒   ░▒▓█  ▄ ▒██▀▀█▄  
▒██▒   ░██▒ ▓█   ▓██▒░██████▒░░██▒██▓  ▓█   ▓██▒░██▓ ▒██▒░▒████▒▒▒█████▓ ░██▓ ▒██▒░██████▒ ▓█   ▓██▒▒██░   ▓██░ ▓█   ▓██▒░██████▒  ░ ██▒▓░▒███████▒░▒████▒░██▓ ▒██▒
░ ▒░   ░  ░ ▒▒   ▓▒█░░ ▒░▓  ░░ ▓░▒ ▒   ▒▒   ▓▒█░░ ▒▓ ░▒▓░░░ ▒░ ░░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░ ▒░▓  ░ ▒▒   ▓▒█░░ ▒░   ▒ ▒  ▒▒   ▓▒█░░ ▒░▓  ░   ██▒▒▒ ░▒▒ ▓░▒░▒░░ ▒░ ░░ ▒▓ ░▒▓░
░  ░      ░  ▒   ▒▒ ░░ ░ ▒  ░  ▒ ░ ░    ▒   ▒▒ ░  ░▒ ░ ▒░ ░ ░  ░░░▒░ ░ ░   ░▒ ░ ▒░░ ░ ▒  ░  ▒   ▒▒ ░░ ░░   ░ ▒░  ▒   ▒▒ ░░ ░ ▒  ░ ▓██ xophidia@2021░  ░  ░▒ ░ ▒░
░      ░     ░   ▒     ░ ░     ░   ░    ░   ▒     ░░   ░    ░    ░░░ ░ ░   ░░   ░   ░ ░     ░   ▒      ░   ░ ░   ░   ▒     ░ ░    ▒ ▒ ░░  ░ ░ ░ ░ ░   ░     ░░   ░ 
       ░         ░  ░    ░  ░    ░          ░  ░   ░        ░  ░   ░        ░         ░  ░      ░  ░         ░       ░  ░    ░  ░ ░ ░       ░ ░       ░  ░   ░     
                                                                                                                                  ░ ░     ░                        
                                                                                 
Based on :
    - https://acris.aalto.fi/ws/portalfiles/portal/16859732/urlset.csv.zip
    - https://www.unb.ca/cic/datasets/url-2016.html
    - extract URL from OTX Alienvault
    - http://205.174.165.80/CICDataset/ISCX-URL-2016/
    
     In the order : ("Naive Bayes | LogisticRegression | RandomForest")
     pynb file : 
"""

def verif_dir(_dir):
  if not os.path.isdir(dir_c):
    raise Exception("{0} is not a valid path".format(dir_c))
  if os.access(dir_c, os.R_OK):
    return dir_c
  else:
    raise Exception("{0} is not a readable dir".format(dir_c))

parser = argparse.ArgumentParser(description='Detect Url Benign/Malware')
parser.add_argument('strings', nargs='*',  help="The string to analyze")
parser.add_argument('-f', help="file to analyze")
parser.add_argument('-r', choices=[2,3],type=int, default=1, help="Set number of true needed for a valid Point Of Interest (True/False)  2: [2 True] 3: [3 True]")
parser.add_argument('-p', default='./models/' , help="Where models are. default = ./models/")
parser.add_argument('-o', action='store_true', help="Print result Json format")
parser.add_argument('-e', action='store_true', help="Export result into protobuf format - filename export")
parser.add_argument('-i','--info', action='store_true',  help="Print information")
args = parser.parse_args()

flag = False

def export_protobuf(df):
    serialized_file = open('export', "wb")
    export = export_pb2.Analyse()
    for i, rows in df.iterrows():
        entry = export.exp.add()                
        entry.url = i
        entry.nb = rows['Naive Bayes']
        entry.lr = rows['Logistic Regression']
        entry.rf = rows['Random Forest']
        entry.poi = rows['POI']
    serialized_file.write(export.SerializeToString())
    serialized_file.close()
                
def nb(string):
    """ naive Bayes """
    try:
        load_nb = joblib.load(args.p + os.sep + "nb.joblib")
        return load_nb.predict(pd.Series(string))
    except FileNotFoundError:
        print("Error opening naiveBayes file")

def lr(string):
    """ LogisticRegression """
    try:
         load_lr = joblib.load(args.p + os.sep + "lr.joblib")
         return load_lr.predict(pd.Series(string))
    except FileNotFoundError:
        print("Error opening logisticRegression file")     


def rf(string):
    """ RandomForest """
    try:
        load_rf = joblib.load(args.p + os.sep + "randomforest_tfidf.joblib")
        return load_rf.predict(pd.Series(string))
    except FileNotFoundError:
        print("Error opening randomForest file")


if __name__ == "__main__":
    result_dict = {}
    # print all value 
    pd.set_option('display.max_rows', None)
    
    print(message)

    if args.f :
        try:
            lines = [x.rstrip('\n') for x in open(args.f,'r')]
            print("Analyse du fichier %s en cours" % (args.f))
            with tqdm(total=len(lines)) as bar :
                result_dict["Naive Bayes"] = nb(lines)
                bar.update(len(lines) / 3)
                result_dict["Logistic Regression"] = lr(lines)
                bar.update(len(lines) / 3)
                result_dict["Random Forest"] = rf(lines)
                bar.update(len(lines) / 3)

            df = pd.DataFrame(data = result_dict, index=lines)
            
            # Add protobuf serialize
                            
            if args.r == 3:
                df['POI'] = np.where((df["Naive Bayes"] == 1.0) & (df["Logistic Regression"] == 1.0) & (df["Random Forest"] == 1.0), True, False)
            else:
                df['POI'] = np.where((df["Naive Bayes"] + df["Logistic Regression"] + df["Random Forest"] >= 2.0) , True, False)                
            if args.o :
                print(df.to_json(orient="table"))
            elif args.e :
                export_protobuf(df)                
                #Read from protobuf file : ok
                #se= open('export', "rb")
                #read = export_pb2.Analyse()
                #read.ParseFromString(se.read())
                #print(read.exp[0:3])
            else:
                print(df)
        except FileNotFoundError:
            print("Error opening file")
    elif args.strings :
        try :
            print("Analyse de l'url %s en cours" % (args.strings))
            result_dict["Naive Bayes"] = nb(args.strings)[0]
            result_dict["Logistic Regression"] = lr(args.strings)[0]
            result_dict["Random Forest"] = rf(args.strings)[0]
            df = pd.DataFrame(data = result_dict, index=args.strings)
            if args.r == 1:
                df['POI'] = np.where((df["Naive Bayes"] == 1.0) & (df["Logistic Regression"] == 1.0) & (df["Random Forest"] == 1.0), True, False)
            else:
                df['POI'] = np.where((df["Naive Bayes"] + df["Logistic Regression"] + df["Random Forest"] >= 2.0) , True, False)
            if args.o:
                print(df.to_json(orient="table"))
            elif args.e:
                export_protobuf(df)
            else:
                print(df)
        except :
            print ("Error ! tips : Check yout models repository")
    else:
        parser.print_help()
