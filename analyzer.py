# Analyse_url
# author : xophidia
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import pyplot
from urllib.parse import urlparse
import joblib
import argparse
import re
import pandas as pd
from urllib.parse import urlparse
from pprint import pprint

message = """
   ___                __                                __
   /   |  ____  ____ _/ /_  ______  ___      __  _______/ /
  / /| | / __ \/ __ `/ / / / /_  / / _ \    / / / / ___/ / 
 / ___ |/ / / / /_/ / / /_/ / / /_/  __/   / /_/ / /  / /  
/_/  |_/_/ /_/\__,_/_/\__, / /___/\___/____\__,_/_/  /_/   
                     /____/          /_____/@Xophidia               

Based on :
    - https://acris.aalto.fi/ws/portalfiles/portal/16859732/urlset.csv.zip
    - https://www.unb.ca/cic/datasets/url-2016.html
    - extract URL from OTX Alienvault

    
     In the order : ("Naive Bayes | LogisticRegression | RandomForest")
"""


parser = argparse.ArgumentParser(description='Detect Url Benign/Malware')
parser.add_argument('strings', nargs='*', help="The string to analyze with RandomForest")
parser.add_argument('-f', help="file to analyze")
parser.add_argument('-i','--info', help="Print information")
args = parser.parse_args()


def nb(string):
    load_nb = joblib.load("nb.joblib")
    x = pd.Series(string)
    return load_nb.predict(x)[0]

def lr(string):
    load_lr = joblib.load("lr.joblib")
    x = pd.Series(string)
    return load_lr.predict(x)[0]


def rf(string):
    load_rf = joblib.load("randomforest_tfidf.joblib")
    x = pd.Series(string)
    return load_rf.predict(x)[0]


if __name__ == "__main__":
    result = []
    nba = []
    lra = []
    rfa = []
    result_dict = {}

    if args.f :
        try:
            lines = [x.rstrip('\n') for x in open(args.f,'r')]
        except:
            print("Error opening file")
            pass
        
        for line in lines :
            nba.append(nb(str(line)))
            lra.append(lr(str(line)))
            rfa.append(rf(str(line)))

        result_dict["Naive Bayes"] = nba
        result_dict["Logistic Regression"] = lra
        result_dict["Random Forest"] = rfa
            
    else:
        result.append(nb(args.strings))
        result.append(lr(args.strings))
        result.append(rf(args.strings))
        result_dict[str(args.strings)] = result
        print(result)
    df = pd.DataFrame(data = result_dict, index=lines)
    print(df)
