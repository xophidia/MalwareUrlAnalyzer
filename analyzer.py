import pandas as pd
import numpy as np
import joblib
import argparse
import time
from tqdm import tqdm

message = """
   ___                __                                __
   /   |  ____  ____ _/ /_  ______  ___      __  _______/ /
  / /| | / __ \/ __ `/ / / / /_  / / _ \    / / / / ___/ / 
 / ___ |/ / / / /_/ / / /_/ / / /_/  __/   / /_/ / /  / /  
/_/  |_/_/ /_/\__,_/_/\__, / /___/\___/____\__,_/_/  /_/   
                     /____/          /_____/@Xophidia_2021               

Based on :
    - https://acris.aalto.fi/ws/portalfiles/portal/16859732/urlset.csv.zip
    - https://www.unb.ca/cic/datasets/url-2016.html
    - extract URL from OTX Alienvault
    - http://205.174.165.80/CICDataset/ISCX-URL-2016/
    
     In the order : ("Naive Bayes | LogisticRegression | RandomForest")
     pynb file : 
"""


parser = argparse.ArgumentParser(description='Detect Url Benign/Malware')
parser.add_argument('strings', nargs='*', help="The string to analyze")
parser.add_argument('-f', help="file to analyze")
parser.add_argument('-i','--info', help="Print information")
args = parser.parse_args()


def nb(string):
    """ naive Bayes """
    load_nb = joblib.load("nb.joblib")
    return load_nb.predict(pd.Series(string))

def lr(string):
    """ LogisticRegression """
    load_lr = joblib.load("lr.joblib")
    return load_lr.predict(pd.Series(string))


def rf(string):
    """ RandomForest """
    load_rf = joblib.load("randomforest_tfidf.joblib")
    return load_rf.predict(pd.Series(string))


if __name__ == "__main__":
    result_dict = {}
    
    print(message)

    if args.f :
        try:
            lines = [x.rstrip('\n') for x in open(args.f,'r')]
            print("Analyse du fichier %s en cours" % (args.f))
            with tqdm(total=len(lines)) as bar :
                result_dict["Naive Bayes"] = nb(lines)
                bar.update(len(lines) / 3)
                result_dict["Logistic Regression"] = lr(lines)
                bar.update(len(lines) / 3)
                result_dict["Random Forest"] = rf(lines)
                bar.update(len(lines) / 3)

            df = pd.DataFrame(data = result_dict, index=lines)
            df['POI'] = np.where((df["Naive Bayes"] == 1.0) & (df["Logistic Regression"] == 1.0) & (df["Random Forest"] == 1.0), True, False)
            print(df)
        except FileNotFoundError:
            print("Error opening file")
          
    elif args.strings :
        print("Analyse de l'url %s en cours" % (args.strings))
        result = []
        result.append(nb(args.strings)[0])
        result.append(lr(args.strings)[0])
        result.append(rf(args.strings)[0])
        print(result)
    else:
        parser.print_help()

